package dpcollector;

import java.util.*;

public class AndroidSourceSinkSummary {
	
	public static List<String> SEND_APIS = Arrays.asList(new String[] {
			/*
			"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>",
			"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putFloat(java.lang.String,float)>",
			"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>",
			"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>",
			"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>",
			"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>",
			"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>",
			"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>",
			"<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>",
			"<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>",
			*/
			"<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>",
			"<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>",
			"<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>",
			"<android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>",
			"<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>",
			"<android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>",
			"<android.webkit.WebView: void loadData(java.lang.String,java.lang.String,java.lang.String)>",
			"<android.webkit.WebView: void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>",
			"<android.webkit.WebView: void loadUrl(java.lang.String)>",
			"<android.webkit.WebView: void loadUrl(java.lang.String,java.util.Map)>",
			/*
			"<com.adobe.xmp.impl.CountOutputStream: void write(byte[])>",
			"<com.adobe.xmp.impl.CountOutputStream: void write(byte[],int,int)>",
			"<com.adobe.xmp.impl.CountOutputStream: void write(int)>",
			"<com.adobe.xmp.impl.XMPDateTimeImpl: void setHour(int)>",
			"<com.adobe.xmp.impl.XMPDateTimeImpl: void setMinute(int)>",
			"<com.adobe.xmp.impl.XMPDateTimeImpl: void setSecond(int)>",
			"<com.adobe.xmp.impl.XMPDateTimeImpl: void setYear(int)>",
			"<com.adobe.xmp.impl.XMPMetaImpl: void setLocalizedText(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.PropertyOptions)>",
			"<com.adobe.xmp.impl.XMPMetaImpl: void setProperty(java.lang.String,java.lang.String,java.lang.Object)>",
			"<com.adobe.xmp.impl.XMPMetaImpl: void setProperty(java.lang.String,java.lang.String,java.lang.Object,com.adobe.xmp.options.PropertyOptions)>",
			"<com.adobe.xmp.impl.XMPMetaImpl: void setPropertyBoolean(java.lang.String,java.lang.String,boolean)>",
			"<com.adobe.xmp.impl.XMPMetaImpl: void setPropertyDate(java.lang.String,java.lang.String,com.adobe.xmp.XMPDateTime)>",
			"<com.adobe.xmp.impl.XMPMetaImpl: void setPropertyDouble(java.lang.String,java.lang.String,double)>",
			"<com.adobe.xmp.impl.XMPMetaImpl: void setPropertyInteger(java.lang.String,java.lang.String,int)>",
			"<com.adobe.xmp.impl.XMPSchemaRegistryImpl: java.lang.String registerNamespace(java.lang.String,java.lang.String)>",
			"<com.adobe.xmp.impl.XMPSchemaRegistryImpl: void registerAlias(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.adobe.xmp.options.AliasOptions)>",
			"<com.adobe.xmp.options.AliasOptions: com.adobe.xmp.options.AliasOptions setArrayAltText(boolean)>",
			"<com.adobe.xmp.options.AliasOptions: com.adobe.xmp.options.AliasOptions setArrayOrdered(boolean)>",
			"<com.adobe.xmp.options.Options: void setOption(int,boolean)>",
			"<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArray(boolean)>",
			"<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArrayAltText(boolean)>",
			"<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArrayAlternate(boolean)>",
			"<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setArrayOrdered(boolean)>",
			"<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setHasLanguage(boolean)>",
			"<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setHasQualifiers(boolean)>",
			"<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setHasType(boolean)>",
			"<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setQualifier(boolean)>",
			"<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setSchemaNode(boolean)>",
			"<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setStruct(boolean)>",
			"<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setURI(boolean)>",
			"<com.adobe.xmp.options.SerializeOptions: com.adobe.xmp.options.SerializeOptions setOmitPacketWrapper(boolean)>",
			"<com.adobe.xmp.options.SerializeOptions: com.adobe.xmp.options.SerializeOptions setUseCompactFormat(boolean)>",
			*/
			"<com.android.volley.RequestQueue: com.android.volley.Request add(com.android.volley.Request)>",
			"<com.github.scribejava.core.oauth.OAuth20Service: com.github.scribejava.core.model.OAuth2AccessToken sendAccessTokenRequestSync(com.github.scribejava.core.model.OAuthRequest)>",
			"<com.github.scribejava.core.oauth.OAuth20Service: java.util.concurrent.Future sendAccessTokenRequestAsync(com.github.scribejava.core.model.OAuthRequestAsync,com.github.scribejava.core.model.OAuthAsyncRequestCallback)>",
			"<com.google.android.gms.ads.internal.gmsg.HttpClient: org.json.JSONObject send(org.json.JSONObject)>",
			"<com.ibm.mqtt.MqttClient: com.ibm.mqtt.IMqttClient createMqttClient(java.lang.String,com.ibm.mqtt.MqttPersistence)>",
			"<com.ibm.mqtt.MqttClient: void <init>(java.lang.String)>",
			"<com.ibm.mqttclient.factory.MqttClientFactory: com.ibm.mqttclient.MqttClient createMqttClient(java.lang.String,java.lang.String,com.ibm.mqttclient.factory.MqttProperties)>",
			"<com.ibm.mqttclient.factory.MqttClientFactory: com.ibm.mqttclient.MqttClient createMqttClient(java.lang.String,java.lang.String,com.ibm.mqttclient.factory.MqttProperties,com.ibm.mqttclient.MqttPersistence)>",
			"<com.loopj.android.http.AsyncHttpClient: com.loopj.android.http.RequestHandle sendRequest(org.apache.http.impl.client.DefaultHttpClient,org.apache.http.protocol.HttpContext,org.apache.http.client.methods.HttpUriRequest,java.lang.String,com.loopj.android.http.ResponseHandlerInterface,android.content.Context)>",
			"<com.octo.android.robospice.SpiceManager: void execute(com.octo.android.robospice.request.SpiceRequest,com.octo.android.robospice.request.listener.RequestListener)>",
			"<com.octo.android.robospice.SpiceManager: void execute(com.octo.android.robospice.request.SpiceRequest,java.lang.Object,long,com.octo.android.robospice.request.listener.RequestListener)>",
			"<com.squareup.okhttp.OkHttpClient: com.squareup.okhttp.Call newCall(com.squareup.okhttp.Request)>",
			"<gov.nist.core.Host: void setAddress(java.lang.String)>",
			"<gov.nist.core.Host: void setHostAddress(java.lang.String)>",
			"<gov.nist.core.Host: void setHostname(java.lang.String)>",
			"<gov.nist.javax.sip.DialogFilter: void processRequest(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)>",
			"<gov.nist.javax.sip.DialogFilter: void processResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel)>",
			"<gov.nist.javax.sip.DialogFilter: void processResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel,gov.nist.javax.sip.stack.SIPDialog)>",
			"<gov.nist.javax.sip.ListeningPointImpl: void sendHeartbeat(java.lang.String,int)>",
			"<gov.nist.javax.sip.ListeningPointImpl: void setSentBy(java.lang.String)>",
			"<gov.nist.javax.sip.SipProviderImpl: void sendRequest(javax.sip.message.Request)>",
			"<gov.nist.javax.sip.SipProviderImpl: void sendResponse(javax.sip.message.Response)>",
			"<gov.nist.javax.sip.SipProviderImpl: void setListeningPoint(javax.sip.ListeningPoint)>",
			"<gov.nist.javax.sip.SipStackImpl: javax.sip.ListeningPoint createListeningPoint(java.lang.String,int,java.lang.String)>",
			"<gov.nist.javax.sip.SipStackImpl: void <init>",
			"<gov.nist.javax.sip.address.AddressImpl: void setUser(java.lang.String)>",
			"<gov.nist.javax.sip.address.Authority: void setHost(gov.nist.core.Host)>",
			"<gov.nist.javax.sip.address.Authority: void setPassword(java.lang.String)>",
			"<gov.nist.javax.sip.address.Authority: void setPort(int)>",
			"<gov.nist.javax.sip.address.Authority: void setUser(java.lang.String)>",
			"<gov.nist.javax.sip.address.SipUri: void setDefaultParm(java.lang.String,java.lang.Object)>",
			"<gov.nist.javax.sip.address.SipUri: void setGrParam(java.lang.String)>",
			"<gov.nist.javax.sip.address.SipUri: void setHeader(java.lang.String,java.lang.String)>",
			"<gov.nist.javax.sip.address.SipUri: void setHost(gov.nist.core.Host)>",
			"<gov.nist.javax.sip.address.SipUri: void setHost(java.lang.String)>",
			"<gov.nist.javax.sip.address.SipUri: void setHostPort(gov.nist.core.HostPort)>",
			"<gov.nist.javax.sip.address.SipUri: void setIsdnSubAddress(java.lang.String)>",
			"<gov.nist.javax.sip.address.SipUri: void setMAddr(java.lang.String)>",
			"<gov.nist.javax.sip.address.SipUri: void setMAddrParam(java.lang.String)>",
			"<gov.nist.javax.sip.address.SipUri: void setMethod(java.lang.String)>",
			"<gov.nist.javax.sip.address.SipUri: void setMethodParam(java.lang.String)>",
			"<gov.nist.javax.sip.address.SipUri: void setParameter(java.lang.String,java.lang.String)>",
			"<gov.nist.javax.sip.address.SipUri: void setPort(int)>",
			"<gov.nist.javax.sip.address.SipUri: void setQHeader(gov.nist.core.NameValue)>",
			"<gov.nist.javax.sip.address.SipUri: void setScheme(java.lang.String)>",
			"<gov.nist.javax.sip.address.SipUri: void setSecure(boolean)>",
			"<gov.nist.javax.sip.address.SipUri: void setTTLParam(int)>",
			"<gov.nist.javax.sip.address.SipUri: void setTransportParam(java.lang.String)>",
			"<gov.nist.javax.sip.address.SipUri: void setUriParameter(gov.nist.core.NameValue)>",
			"<gov.nist.javax.sip.address.SipUri: void setUriParm(java.lang.String,java.lang.Object)>",
			"<gov.nist.javax.sip.address.SipUri: void setUser(java.lang.String)>",
			"<gov.nist.javax.sip.address.SipUri: void setUserParam(java.lang.String)>",
			"<gov.nist.javax.sip.address.SipUri: void setUserPassword(java.lang.String)>",
			"<gov.nist.javax.sip.address.TelURLImpl: void setGlobal(boolean)>",
			"<gov.nist.javax.sip.address.TelURLImpl: void setIsdnSubAddress(java.lang.String)>",
			"<gov.nist.javax.sip.address.TelURLImpl: void setParameter(java.lang.String,java.lang.String)>",
			"<gov.nist.javax.sip.address.TelURLImpl: void setPhoneContext(java.lang.String)>",
			"<gov.nist.javax.sip.address.TelURLImpl: void setPhoneNumber(java.lang.String)>",
			"<gov.nist.javax.sip.address.TelURLImpl: void setPostDial(java.lang.String)>",
			"<gov.nist.javax.sip.address.TelephoneNumber: void setIsdnSubaddress(java.lang.String)>",
			"<gov.nist.javax.sip.address.TelephoneNumber: void setParameter(java.lang.String,java.lang.String)>",
			"<gov.nist.javax.sip.address.TelephoneNumber: void setParm(java.lang.String,java.lang.Object)>",
			"<gov.nist.javax.sip.address.TelephoneNumber: void setPostDial(java.lang.String)>",
			"<gov.nist.javax.sip.clientauthutils.CredentialsCache: void cacheAuthorizationHeader(java.lang.String,javax.sip.header.AuthorizationHeader,int)>",
			"<gov.nist.javax.sip.header.Accept: void setContentSubType(java.lang.String)>",
			"<gov.nist.javax.sip.header.Accept: void setContentType(java.lang.String)>",
			"<gov.nist.javax.sip.header.Accept: void setQValue(float)>",
			"<gov.nist.javax.sip.header.AcceptEncoding: void setQValue(float)>",
			"<gov.nist.javax.sip.header.AcceptLanguage: void setAcceptLanguage(java.util.Locale)>",
			"<gov.nist.javax.sip.header.AcceptLanguage: void setLanguageRange(java.lang.String)>",
			"<gov.nist.javax.sip.header.AcceptLanguage: void setQValue(float)>",
			"<gov.nist.javax.sip.header.AuthenticationHeader: void setAlgorithm(java.lang.String)>",
			"<gov.nist.javax.sip.header.AuthenticationHeader: void setCK(java.lang.String)>",
			"<gov.nist.javax.sip.header.AuthenticationHeader: void setCNonce(java.lang.String)>",
			"<gov.nist.javax.sip.header.AuthenticationHeader: void setChallenge(gov.nist.javax.sip.header.Challenge)>",
			"<gov.nist.javax.sip.header.AuthenticationHeader: void setDomain(java.lang.String)>",
			"<gov.nist.javax.sip.header.AuthenticationHeader: void setIK(java.lang.String)>",
			"<gov.nist.javax.sip.header.AuthenticationHeader: void setIntegrityProtected(java.lang.String)>",
			"<gov.nist.javax.sip.header.AuthenticationHeader: void setNonce(java.lang.String)>",
			"<gov.nist.javax.sip.header.AuthenticationHeader: void setNonceCount(int)>",
			"<gov.nist.javax.sip.header.AuthenticationHeader: void setOpaque(java.lang.String)>",
			"<gov.nist.javax.sip.header.AuthenticationHeader: void setParameter(java.lang.String,java.lang.String)>",
			"<gov.nist.javax.sip.header.AuthenticationHeader: void setQop(java.lang.String)>",
			"<gov.nist.javax.sip.header.AuthenticationHeader: void setRealm(java.lang.String)>",
			"<gov.nist.javax.sip.header.AuthenticationHeader: void setResponse(java.lang.String)>",
			"<gov.nist.javax.sip.header.AuthenticationHeader: void setStale(boolean)>",
			"<gov.nist.javax.sip.header.AuthenticationHeader: void setUsername(java.lang.String)>",
			"<gov.nist.javax.sip.header.AuthenticationInfo: void setCNonce(java.lang.String)>",
			"<gov.nist.javax.sip.header.AuthenticationInfo: void setNextNonce(java.lang.String)>",
			"<gov.nist.javax.sip.header.AuthenticationInfo: void setNonceCount(int)>",
			"<gov.nist.javax.sip.header.AuthenticationInfo: void setParameter(java.lang.String,java.lang.String)>",
			"<gov.nist.javax.sip.header.AuthenticationInfo: void setQop(java.lang.String)>",
			"<gov.nist.javax.sip.header.AuthenticationInfo: void setResponse(java.lang.String)>",
			"<gov.nist.javax.sip.header.CSeq: void setMethod(java.lang.String)>",
			"<gov.nist.javax.sip.header.CSeq: void setSeqNumber(long)>",
			"<gov.nist.javax.sip.header.CSeq: void setSequenceNumber(int)>",
			"<gov.nist.javax.sip.header.CallID: void setCallId(java.lang.String)>",
			"<gov.nist.javax.sip.header.CallInfo: void setPurpose(java.lang.String)>",
			"<gov.nist.javax.sip.header.Challenge: void setParameter(gov.nist.core.NameValue)>",
			"<gov.nist.javax.sip.header.Contact: void setExpires(int)>",
			"<gov.nist.javax.sip.header.Contact: void setParameter(java.lang.String,java.lang.String)>",
			"<gov.nist.javax.sip.header.Contact: void setPubGruuParam(java.lang.String)>",
			"<gov.nist.javax.sip.header.Contact: void setQValue(float)>",
			"<gov.nist.javax.sip.header.Contact: void setSipInstanceParam(java.lang.String)>",
			"<gov.nist.javax.sip.header.Contact: void setTempGruuParam(java.lang.String)>",
			"<gov.nist.javax.sip.header.Contact: void setWildCardFlag(boolean)>",
			"<gov.nist.javax.sip.header.ContentDisposition: void setHandling(java.lang.String)>",
			"<gov.nist.javax.sip.header.ContentLanguage: void setLanguageTag(java.lang.String)>",
			"<gov.nist.javax.sip.header.ContentLength: void setContentLength(int)>",
			"<gov.nist.javax.sip.header.ContentType: void setContentSubType(java.lang.String)>",
			"<gov.nist.javax.sip.header.ContentType: void setContentType(java.lang.String)>",
			"<gov.nist.javax.sip.header.ContentType: void setContentType(java.lang.String,java.lang.String)>",
			"<gov.nist.javax.sip.header.ErrorInfo: void setErrorMessage(java.lang.String)>",
			"<gov.nist.javax.sip.header.Event: void setEventId(java.lang.String)>",
			"<gov.nist.javax.sip.header.From: void setTag(java.lang.String)>",
			"<gov.nist.javax.sip.header.HeaderFactoryImpl: void setPrettyEncoding(boolean)>",
			"<gov.nist.javax.sip.header.InReplyTo: void setCallId(java.lang.String)>",
			"<gov.nist.javax.sip.header.NameMap: void addExtensionHeader(java.lang.String,java.lang.String)>",
			"<gov.nist.javax.sip.header.ParametersHeader: void setMultiParameter(gov.nist.core.NameValue)>",
			"<gov.nist.javax.sip.header.ParametersHeader: void setMultiParameter(java.lang.String,java.lang.String)>",
			"<gov.nist.javax.sip.header.ParametersHeader: void setParameter(gov.nist.core.NameValue)>",
			"<gov.nist.javax.sip.header.ParametersHeader: void setParameter(java.lang.String,boolean)>",
			"<gov.nist.javax.sip.header.ParametersHeader: void setParameter(java.lang.String,float)>",
			"<gov.nist.javax.sip.header.ParametersHeader: void setParameter(java.lang.String,int)>",
			"<gov.nist.javax.sip.header.ParametersHeader: void setParameter(java.lang.String,java.lang.Object)>",
			"<gov.nist.javax.sip.header.ParametersHeader: void setParameter(java.lang.String,java.lang.String)>",
			"<gov.nist.javax.sip.header.ParametersHeader: void setQuotedParameter(java.lang.String,java.lang.String)>",
			"<gov.nist.javax.sip.header.Protocol: void setProtocol(java.lang.String)>",
			"<gov.nist.javax.sip.header.RAck: void setCSeqNumber(int)>",
			"<gov.nist.javax.sip.header.RAck: void setRSeqNumber(int)>",
			"<gov.nist.javax.sip.header.RSeq: void setSequenceNumber(int)>",
			"<gov.nist.javax.sip.header.Reason: void setCause(int)>",
			"<gov.nist.javax.sip.header.Reason: void setText(java.lang.String)>",
			"<gov.nist.javax.sip.header.RetryAfter: void setDuration(int)>",
			"<gov.nist.javax.sip.header.RetryAfter: void setRetryAfter(int)>",
			"<gov.nist.javax.sip.header.SIPDateHeader: void setDate(java.util.Calendar)>",
			"<gov.nist.javax.sip.header.SIPETag: void setValue(java.lang.String)>",
			"<gov.nist.javax.sip.header.SIPHeaderList: gov.nist.javax.sip.header.SIPHeader set(int,gov.nist.javax.sip.header.SIPHeader)>",
			"<gov.nist.javax.sip.header.SIPHeaderList: java.lang.Object set(int,java.lang.Object)>",
			"<gov.nist.javax.sip.header.SIPIfMatch: void setValue(java.lang.String)>",
			"<gov.nist.javax.sip.header.To: void setTag(java.lang.String)>",
			"<gov.nist.javax.sip.header.Via: void setBranch(java.lang.String)>",
			"<gov.nist.javax.sip.header.Via: void setHost(gov.nist.core.Host)>",
			"<gov.nist.javax.sip.header.Via: void setHost(java.lang.String)>",
			"<gov.nist.javax.sip.header.Via: void setMAddr(java.lang.String)>",
			"<gov.nist.javax.sip.header.Via: void setPort(int)>",
			"<gov.nist.javax.sip.header.Via: void setProtocol(java.lang.String)>",
			"<gov.nist.javax.sip.header.Via: void setProtocolVersion(java.lang.String)>",
			"<gov.nist.javax.sip.header.Via: void setReceived(java.lang.String)>",
			"<gov.nist.javax.sip.header.Via: void setTTL(int)>",
			"<gov.nist.javax.sip.header.Via: void setTransport(java.lang.String)>",
			"<gov.nist.javax.sip.header.extensions.Join: void setFromTag(java.lang.String)>",
			"<gov.nist.javax.sip.header.extensions.Join: void setToTag(java.lang.String)>",
			"<gov.nist.javax.sip.header.extensions.Join: void setValue(java.lang.String)>",
			"<gov.nist.javax.sip.header.extensions.MinSE: void setValue(java.lang.String)>",
			"<gov.nist.javax.sip.header.extensions.References: void setParameter(java.lang.String,java.lang.String)>",
			"<gov.nist.javax.sip.header.extensions.References: void setRel(java.lang.String)>",
			"<gov.nist.javax.sip.header.extensions.References: void setValue(java.lang.String)>",
			"<gov.nist.javax.sip.header.extensions.ReferredBy: void setValue(java.lang.String)>",
			"<gov.nist.javax.sip.header.extensions.Replaces: void setFromTag(java.lang.String)>",
			"<gov.nist.javax.sip.header.extensions.Replaces: void setToTag(java.lang.String)>",
			"<gov.nist.javax.sip.header.extensions.Replaces: void setValue(java.lang.String)>",
			"<gov.nist.javax.sip.header.extensions.SessionExpires: void setRefresher(java.lang.String)>",
			"<gov.nist.javax.sip.header.extensions.SessionExpires: void setValue(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setCGI3GPP(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setCI3GPP2(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setDSLLocation(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setParameter(java.lang.String,java.lang.Object)>",
			"<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setUtranCellID3GPP(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.PAccessNetworkInfo: void setValue(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.PAssertedIdentity: void setValue(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.PAssertedService: void setValue(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.PAssociatedURI: void setValue(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.PCalledPartyID: void setValue(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.PChargingFunctionAddresses: void setChargingCollectionFunctionAddress(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.PChargingFunctionAddresses: void setEventChargingFunctionAddress(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.PChargingFunctionAddresses: void setValue(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.PChargingVector: void setICID(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.PChargingVector: void setICIDGeneratedAt(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.PChargingVector: void setOriginatingIOI(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.PChargingVector: void setTerminatingIOI(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.PChargingVector: void setValue(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.PMediaAuthorization: void setValue(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.PPreferredIdentity: void setValue(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.PPreferredService: void setSubserviceIdentifiers(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.PPreferredService: void setValue(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.PProfileKey: void setValue(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.PServedUser: void setRegistrationState(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.PServedUser: void setSessionCase(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.PServedUser: void setValue(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.PUserDatabase: void setValue(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.PVisitedNetworkID: void setValue(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.PVisitedNetworkID: void setVisitedNetworkID(gov.nist.core.Token)>",
			"<gov.nist.javax.sip.header.ims.Path: void setValue(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.Privacy: void setValue(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.SecurityAgree: void setAlgorithm(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.SecurityAgree: void setEncryptionAlgorithm(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.SecurityAgree: void setMode(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.SecurityAgree: void setParameter(java.lang.String,java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.SecurityAgree: void setPortClient(int)>",
			"<gov.nist.javax.sip.header.ims.SecurityAgree: void setPortServer(int)>",
			"<gov.nist.javax.sip.header.ims.SecurityAgree: void setPreference(float)>",
			"<gov.nist.javax.sip.header.ims.SecurityAgree: void setProtocol(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.SecurityAgree: void setSPIClient(int)>",
			"<gov.nist.javax.sip.header.ims.SecurityAgree: void setSPIServer(int)>",
			"<gov.nist.javax.sip.header.ims.SecurityClient: void setValue(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.SecurityServer: void setValue(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.SecurityVerify: void setValue(java.lang.String)>",
			"<gov.nist.javax.sip.header.ims.ServiceRoute: void setValue(java.lang.String)>",
			"<gov.nist.javax.sip.message.HeaderIterator: void set(java.lang.Object)>",
			"<gov.nist.javax.sip.message.MessageFactoryImpl: void setDefaultContentEncodingCharset(java.lang.String)>",
			"<gov.nist.javax.sip.message.SIPMessage: void attachHeader(gov.nist.javax.sip.header.SIPHeader,boolean,boolean)>",
			"<gov.nist.javax.sip.message.SIPMessage: void setCallId(java.lang.String)>",
			"<gov.nist.javax.sip.message.SIPMessage: void setFromTag(java.lang.String)>",
			"<gov.nist.javax.sip.message.SIPMessage: void setHeader(gov.nist.javax.sip.header.SIPHeaderList)>",
			"<gov.nist.javax.sip.message.SIPMessage: void setMessageContent(java.lang.String,java.lang.String,byte[])>",
			"<gov.nist.javax.sip.message.SIPMessage: void setToTag(java.lang.String)>",
			"<gov.nist.javax.sip.message.SIPRequest: byte[] encodeAsBytes(java.lang.String)>",
			"<gov.nist.javax.sip.message.SIPRequest: void setMethod(java.lang.String)>",
			"<gov.nist.javax.sip.message.SIPRequest: void setSIPVersion(java.lang.String)>",
			"<gov.nist.javax.sip.message.SIPResponse: void setReasonPhrase(java.lang.String)>",
			"<gov.nist.javax.sip.message.SIPResponse: void setSIPVersion(java.lang.String)>",
			"<gov.nist.javax.sip.message.SIPResponse: void setStatusCode(int)>",
			"<gov.nist.javax.sip.parser.ParserFactory: gov.nist.javax.sip.parser.HeaderParser createParser(java.lang.String)>",
			"<gov.nist.javax.sip.stack.IOHandler: java.net.Socket sendBytes(java.net.InetAddress,java.net.InetAddress,int,java.lang.String,byte[],boolean,gov.nist.javax.sip.stack.MessageChannel)>",
			"<gov.nist.javax.sip.stack.MessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage,java.net.InetAddress,int)>",
			"<gov.nist.javax.sip.stack.MessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage,javax.sip.address.Hop)>",
			"<gov.nist.javax.sip.stack.SIPClientTransaction: void processResponse(gov.nist.javax.sip.message.SIPResponse,gov.nist.javax.sip.stack.MessageChannel)>",
			"<gov.nist.javax.sip.stack.SIPClientTransaction: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>",
			"<gov.nist.javax.sip.stack.SIPClientTransaction: void setDialog(gov.nist.javax.sip.stack.SIPDialog,java.lang.String)>",
			"<gov.nist.javax.sip.stack.SIPClientTransaction: void setState(javax.sip.TransactionState)>",
			"<gov.nist.javax.sip.stack.SIPDialog: void sendAck(javax.sip.message.Request)>",
			"<gov.nist.javax.sip.stack.SIPDialog: void sendReliableProvisionalResponse(javax.sip.message.Response)>",
			"<gov.nist.javax.sip.stack.SIPDialog: void sendRequest(javax.sip.ClientTransaction)>",
			"<gov.nist.javax.sip.stack.SIPDialog: void sendRequest(javax.sip.ClientTransaction,boolean)>",
			"<gov.nist.javax.sip.stack.SIPDialog: void setLastResponse(gov.nist.javax.sip.stack.SIPTransaction,gov.nist.javax.sip.message.SIPResponse)>",
			"<gov.nist.javax.sip.stack.SIPDialog: void setResponseTags(gov.nist.javax.sip.message.SIPResponse)>",
			"<gov.nist.javax.sip.stack.SIPDialog: void setState(int)>",
			"<gov.nist.javax.sip.stack.SIPDialog: void startRetransmitTimer(gov.nist.javax.sip.stack.SIPServerTransaction,javax.sip.message.Response)>",
			"<gov.nist.javax.sip.stack.SIPServerTransaction: void processRequest(gov.nist.javax.sip.message.SIPRequest,gov.nist.javax.sip.stack.MessageChannel)>",
			"<gov.nist.javax.sip.stack.SIPServerTransaction: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>",
			"<gov.nist.javax.sip.stack.SIPServerTransaction: void sendResponse(javax.sip.message.Response)>",
			"<gov.nist.javax.sip.stack.SIPServerTransaction: void setMapped(boolean)>",
			"<gov.nist.javax.sip.stack.SIPServerTransaction: void setOriginalRequest(gov.nist.javax.sip.message.SIPRequest)>",
			"<gov.nist.javax.sip.stack.SIPServerTransaction: void setState(javax.sip.TransactionState)>",
			"<gov.nist.javax.sip.stack.SIPTransaction: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>",
			"<gov.nist.javax.sip.stack.SIPTransactionStack: gov.nist.javax.sip.stack.SIPDialog createDialog(gov.nist.javax.sip.stack.SIPTransaction)>",
			"<gov.nist.javax.sip.stack.SIPTransactionStack: void addForkedClientTransaction(gov.nist.javax.sip.stack.SIPClientTransaction)>",
			"<gov.nist.javax.sip.stack.SIPTransactionStack: void addTransactionPendingAck(gov.nist.javax.sip.stack.SIPServerTransaction)>",
			"<gov.nist.javax.sip.stack.SIPTransactionStack: void putDialog(gov.nist.javax.sip.stack.SIPDialog)>",
			"<gov.nist.javax.sip.stack.SIPTransactionStack: void putInMergeTable(gov.nist.javax.sip.stack.SIPServerTransaction,gov.nist.javax.sip.message.SIPRequest)>",
			"<gov.nist.javax.sip.stack.SIPTransactionStack: void putPendingTransaction(gov.nist.javax.sip.stack.SIPServerTransaction)>",
			"<gov.nist.javax.sip.stack.SIPTransactionStack: void setHostAddress(java.lang.String)>",
			"<gov.nist.javax.sip.stack.TCPMessageChannel: void processMessage(gov.nist.javax.sip.message.SIPMessage)>",
			"<gov.nist.javax.sip.stack.TCPMessageChannel: void sendMessage(byte[],java.net.InetAddress,int,boolean)>",
			"<gov.nist.javax.sip.stack.TCPMessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>",
			"<gov.nist.javax.sip.stack.TCPMessageProcessor: gov.nist.javax.sip.stack.MessageChannel createMessageChannel(gov.nist.core.HostPort)>",
			"<gov.nist.javax.sip.stack.TCPMessageProcessor: gov.nist.javax.sip.stack.MessageChannel createMessageChannel(java.net.InetAddress,int)>",
			"<gov.nist.javax.sip.stack.TCPMessageProcessor: void cacheMessageChannel(gov.nist.javax.sip.stack.TCPMessageChannel)>",
			"<gov.nist.javax.sip.stack.TLSMessageChannel: void processMessage(gov.nist.javax.sip.message.SIPMessage)>",
			"<gov.nist.javax.sip.stack.TLSMessageChannel: void sendMessage(byte[],java.net.InetAddress,int,boolean)>",
			"<gov.nist.javax.sip.stack.TLSMessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>",
			"<gov.nist.javax.sip.stack.TLSMessageProcessor: gov.nist.javax.sip.stack.MessageChannel createMessageChannel(gov.nist.core.HostPort)>",
			"<gov.nist.javax.sip.stack.TLSMessageProcessor: gov.nist.javax.sip.stack.MessageChannel createMessageChannel(java.net.InetAddress,int)>",
			"<gov.nist.javax.sip.stack.TLSMessageProcessor: void cacheMessageChannel(gov.nist.javax.sip.stack.TLSMessageChannel)>",
			"<gov.nist.javax.sip.stack.UDPMessageChannel$PingBackTimerTask: void <init>",
			"<gov.nist.javax.sip.stack.UDPMessageChannel: void sendMessage(byte[],java.net.InetAddress,int,boolean)>",
			"<gov.nist.javax.sip.stack.UDPMessageChannel: void sendMessage(byte[],java.net.InetAddress,int,java.lang.String,boolean)>",
			"<gov.nist.javax.sip.stack.UDPMessageChannel: void sendMessage(gov.nist.javax.sip.message.SIPMessage)>",
			"<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest send(java.io.InputStream)>",
			"<io.fabric.sdk.android.services.network.HttpRequest: io.fabric.sdk.android.services.network.HttpRequest send(java.lang.CharSequence)>",
			/*
			"<java.io.BufferedOutputStream: void write(byte[])>",
			"<java.io.BufferedOutputStream: void write(byte[],int,int)>",
			"<java.io.ByteArrayOutputStream: void write(byte[])>",
			"<java.io.ByteArrayOutputStream: void write(byte[],int,int)>",
			"<java.io.DataOutputStream: void write(byte[])>",
			"<java.io.DataOutputStream: void write(byte[],int,int)>",
			"<java.io.DataOutputStream: void writeBytes(java.lang.String)>",
			"<java.io.DataOutputStream: void writeChars(java.lang.String)>",
			"<java.io.DataOutputStream: void writeUTF(java.lang.String)>",
			"<java.io.FileOutputStream: void write(byte[])>",
			"<java.io.FileOutputStream: void write(byte[],int,int)>",
			"<java.io.FileOutputStream: void write(int)>",
			"<java.io.FilterOutputStream: void write(byte[])>",
			"<java.io.ObjectOutputStream: void write(byte[])>",
			"<java.io.ObjectOutputStream: void writeUTF(java.lang.String)>",
			"<java.io.OutputStream: void write(byte[])>",
			"<java.io.OutputStream: void write(byte[],int,int)>",
			"<java.io.OutputStream: void write(int)>",
			"<java.io.OutputStreamWriter: java.io.Writer append(java.lang.CharSequence)>",
			"<java.io.OutputStreamWriter: void write(java.lang.String)>",
			"<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>",
			"<java.io.Writer: void write(char[])>",
			"<java.io.Writer: void write(char[],int,int)>",
			"<java.io.Writer: void write(int)>",
			"<java.io.Writer: void write(java.lang.String)>",
			"<java.io.Writer: void write(java.lang.String,int,int)>",
			*/
			"<java.net.AddressCache: void put(java.lang.String,java.net.InetAddress[])>",
			"<java.net.AddressCache: void putUnknownHost(java.lang.String,java.lang.String)>",
			"<java.net.DatagramPacket: void setData(byte[])>",
			"<java.net.DatagramPacket: void setData(byte[],int,int)>",
			"<java.net.DatagramPacket: void setSocketAddress(java.net.SocketAddress)>",
			"<java.net.DatagramSocket: void <init>(int)>",
			"<java.net.DatagramSocket: void bind(java.net.SocketAddress)>",
			"<java.net.DatagramSocket: void connect(java.net.InetAddress,int)>",
			"<java.net.DatagramSocket: void connect(java.net.SocketAddress)>",
			"<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>",
			"<java.net.DatagramSocket: void send(java.net.DatagramPacket)>",
			"<java.net.DatagramSocket: void setBroadcast(boolean)>",
			"<java.net.DatagramSocket: void setNetworkInterface(java.net.NetworkInterface)>",
			"<java.net.DatagramSocket: void setReceiveBufferSize(int)>",
			"<java.net.DatagramSocket: void setReuseAddress(boolean)>",
			"<java.net.DatagramSocket: void setSendBufferSize(int)>",
			"<java.net.DatagramSocket: void setSoTimeout(int)>",
			"<java.net.DatagramSocket: void setTrafficClass(int)>",
			"<java.net.DatagramSocketImpl: void connect(java.net.InetAddress,int)>",
			"<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>",
			"<java.net.HttpURLConnection: void <init>(int)>",
			"<java.net.HttpURLConnection: void connect()>",
			"<java.net.HttpURLConnection: void setDoOutput(boolean)>",
			"<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>",
			"<java.net.JarURLConnection: <init>(java.net.URL)>",
			"<java.net.MulticastSocket: void <init>(int)>",
			"<java.net.MulticastSocket: void <init>(java.net.SocketAddress)>",
			"<java.net.MulticastSocket: void bind(java.net.SocketAddress)>",
			"<java.net.MulticastSocket: void send(java.net.DatagramPacket)>",
			"<java.net.MulticastSocket: void send(java.net.DatagramPacket,byte)>",
			"<java.net.MulticastSocket: void setInterface(java.net.InetAddress)>",
			"<java.net.MulticastSocket: void setLoopbackMode(boolean)>",
			"<java.net.MulticastSocket: void setNetworkInterface(java.net.NetworkInterface)>",
			"<java.net.MulticastSocket: void setTTL(byte)>",
			"<java.net.MulticastSocket: void setTimeToLive(int)>",
			"<java.net.PlainDatagramSocketImpl: void bind(int,java.net.InetAddress)>",
			"<java.net.PlainDatagramSocketImpl: void send(java.net.DatagramPacket)>",
			"<java.net.PlainDatagramSocketImpl: void setOption(int,java.lang.Object)>",
			"<java.net.PlainDatagramSocketImpl: void setTTL(byte)>",
			"<java.net.PlainDatagramSocketImpl: void setTimeToLive(int)>",
			"<java.net.PlainSocketImpl$PlainSocketOutputStream: void write(int)>",
			"<java.net.PlainSocketImpl: void bind(java.net.InetAddress,int)>",
			"<java.net.PlainSocketImpl: void setOption(int,java.lang.Object)>",
			"<java.net.ServerSocket: java.net.Socket accept()>",
			"<java.net.ServerSocket: void <init>(int)>",
			"<java.net.ServerSocket: void bind(java.net.SocketAddress)>",
			"<java.net.ServerSocket: void bind(java.net.SocketAddress,int)>",
			"<java.net.ServerSocket: void setPerformancePreferences(int,int,int)>",
			"<java.net.ServerSocket: void setReceiveBufferSize(int)>",
			"<java.net.ServerSocket: void setReuseAddress(boolean)>",
			"<java.net.ServerSocket: void setSoTimeout(int)>",
			"<java.net.Socket: java.io.OutputStream getOutputStream()>",
			"<java.net.Socket: void <init>(int)>",
			"<java.net.Socket: void bind(java.net.SocketAddress)>",
			"<java.net.Socket: void connect(java.net.SocketAddress)>",
			"<java.net.Socket: void connect(java.net.SocketAddress,int)>",
			"<java.net.Socket: void sendUrgentData(int)>",
			"<java.net.Socket: void setKeepAlive(boolean)>",
			"<java.net.Socket: void setOOBInline(boolean)>",
			"<java.net.Socket: void setPerformancePreferences(int,int,int)>",
			"<java.net.Socket: void setReceiveBufferSize(int)>",
			"<java.net.Socket: void setReuseAddress(boolean)>",
			"<java.net.Socket: void setSendBufferSize(int)>",
			"<java.net.Socket: void setSoLinger(boolean,int)>",
			"<java.net.Socket: void setSoTimeout(int)>",
			"<java.net.Socket: void setTcpNoDelay(boolean)>",
			"<java.net.Socket: void setTrafficClass(int)>",
			"<java.net.SocketImpl: void setPerformancePreferences(int,int,int)>",
			"<java.net.Socks4Message: void setCommandOrResult(int)>",
			"<java.net.Socks4Message: void setIP(byte[])>",
			"<java.net.Socks4Message: void setPort(int)>",
			"<java.net.Socks4Message: void setUserId(java.lang.String)>",
			"<java.net.URL: <init>(java.lang.String)>",
			"<java.net.URL: <init>(java.lang.String,java.lang.String,int,java.lang.String)>",
			"<java.net.URL: <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>",
			"<java.net.URL: <init>(java.lang.String,java.lang.String,java.lang.String)>",
			"<java.net.URL: <init>(java.net.URL,java.lang.String)>",
			"<java.net.URL: <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>",
			"<java.net.URL: java.io.InputStream openStream()>",
			"<java.net.URL: java.net.URLConnection openConnection()>",
			"<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>",
			"<java.net.URL: void <init>",
			"<java.net.URL: void <init>(java.lang.String)>",
			"<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>",
			"<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>",
			"<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)>",
			"<java.net.URL: void <init>(java.net.URL,java.lang.String)>",
			"<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>",
			"<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>",
			"<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>",
			"<java.net.URLConnection: <init>(java.net.URL)>",
			"<java.net.URLConnection: java.io.OutputStream getOutputStream()>",
			"<java.net.URLConnection: void connect()>",
			"<java.net.URLConnection: void setDefaultRequestProperty(java.lang.String,java.lang.String)>",
			"<java.net.URLConnection: void setDefaultUseCaches(boolean)>",
			"<java.net.URLConnection: void setDoOutput(boolean)>",
			"<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>",
			"<java.net.URLStreamHandler: java.net.URLConnection openConnection(java.net.URL)>",
			"<java.net.URLStreamHandler: java.net.URLConnection openConnection(java.net.URL,java.net.Proxy)>",
			"<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>",
			"<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>",
			"<java.nio.DatagramChannelImpl$DatagramSocketAdapter: void bind(java.net.SocketAddress)>",
			"<java.nio.DatagramChannelImpl$DatagramSocketAdapter: void send(java.net.DatagramPacket)>",
			"<java.nio.DatagramChannelImpl: int send(java.nio.ByteBuffer,java.net.SocketAddress)>",
			"<java.nio.DatagramChannelImpl: int write(java.nio.ByteBuffer)>",
			"<java.nio.DatagramChannelImpl: long read(java.nio.ByteBuffer[],int,int)>",
			"<java.nio.DatagramChannelImpl: long write(java.nio.ByteBuffer[],int,int)>",
			"<java.nio.ServerSocketChannelImpl$ServerSocketAdapter: void bind(java.net.SocketAddress)>",
			"<java.nio.ServerSocketChannelImpl$ServerSocketAdapter: void bind(java.net.SocketAddress,int)>",
			"<java.nio.ShortBuffer: java.nio.ShortBuffer put(short[],int,int)>",
			"<java.nio.ShortToByteBufferAdapter: java.nio.ShortBuffer put(int,short)>",
			"<java.nio.ShortToByteBufferAdapter: java.nio.ShortBuffer put(short)>",
			"<java.nio.ShortToByteBufferAdapter: java.nio.ShortBuffer put(short[],int,int)>",
			"<java.nio.SocketChannelImpl$SocketAdapter: void bind(java.net.SocketAddress)>",
			"<java.nio.SocketChannelImpl$SocketChannelOutputStream: void write(byte[],int,int)>",
			"<java.nio.SocketChannelImpl: int write(java.nio.ByteBuffer)>",
			"<java.nio.SocketChannelImpl: long read(java.nio.ByteBuffer[],int,int)>",
			"<java.nio.SocketChannelImpl: long write(java.nio.ByteBuffer[],int,int)>",
			"<java.nio.channels.AsynchronousChannelGroup: java.nio.channels.AsynchronousChannelGroup withCachedThreadPool(java.util.concurrent.ExecutorService,int)>",
			"<java.nio.channels.AsynchronousChannelGroup: java.nio.channels.AsynchronousChannelGroup withFixedThreadPool(int,java.util.concurrent.ThreadFactory)>",
			"<java.nio.channels.AsynchronousChannelGroup: java.nio.channels.AsynchronousChannelGroup withThreadPool(java.util.concurrent.ExecutorService)>",
			"<java.nio.channels.AsynchronousFileChannel: java.nio.channels.AsynchronousFileChannel open(java.nio.file.Path,java.nio.file.OpenOption...)>",
			"<java.nio.channels.AsynchronousFileChannel: java.nio.channels.AsynchronousFileChannel open(java.nio.file.Path,java.util.Set,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute...)>",
			"<java.nio.channels.AsynchronousFileChannel: java.util.concurrent.Future write(java.nio.ByteBuffer,long)>",
			"<java.nio.channels.AsynchronousFileChannel: void write(java.nio.ByteBuffer,long,A,java.nio.channels.CompletionHandler)>",
			"<java.nio.channels.AsynchronousServerSocketChannel: java.nio.channels.AsynchronousServerSocketChannel open()>",
			"<java.nio.channels.AsynchronousServerSocketChannel: java.nio.channels.AsynchronousServerSocketChannel open(java.nio.channels.AsynchronousChannelGroup)>",
			"<java.nio.channels.AsynchronousServerSocketChannel: java.util.concurrent.Future accept()>",
			"<java.nio.channels.AsynchronousServerSocketChannel: void accept(A,java.nio.channels.CompletionHandler)>",
			"<java.nio.channels.AsynchronousSocketChannel: java.nio.channels.AsynchronousSocketChannel open()>",
			"<java.nio.channels.AsynchronousSocketChannel: java.nio.channels.AsynchronousSocketChannel open(java.nio.channels.AsynchronousChannelGroup)>",
			"<java.nio.channels.AsynchronousSocketChannel: java.util.concurrent.Future read(java.nio.ByteBuffer)>",
			"<java.nio.channels.AsynchronousSocketChannel: java.util.concurrent.Future write(java.nio.ByteBuffer)>",
			"<java.nio.channels.AsynchronousSocketChannel: void read(java.nio.ByteBuffer,A,java.nio.channels.CompletionHandler)>",
			"<java.nio.channels.AsynchronousSocketChannel: void read(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,A,java.nio.channels.CompletionHandler)>",
			"<java.nio.channels.AsynchronousSocketChannel: void read(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,A,java.nio.channels.CompletionHandler)>",
			"<java.nio.channels.AsynchronousSocketChannel: void write(java.nio.ByteBuffer,A,java.nio.channels.CompletionHandler)>",
			"<java.nio.channels.AsynchronousSocketChannel: void write(java.nio.ByteBuffer,long,java.util.concurrent.TimeUnit,A,java.nio.channels.CompletionHandler)>",
			"<java.nio.channels.AsynchronousSocketChannel: void write(java.nio.ByteBuffer[],int,int,long,java.util.concurrent.TimeUnit,A,java.nio.channels.CompletionHandler)>",
			"<java.nio.channels.Channels$ChannelOutputStream: void write(byte[],int,int)>",
			"<java.nio.channels.Channels$OutputStreamChannel: int write(java.nio.ByteBuffer)>",
			"<java.nio.channels.DatagramChannel: int send(java.nio.ByteBuffer,java.net.SocketAddress)>",
			"<java.nio.channels.DatagramChannel: int write(java.nio.ByteBuffer)>",
			"<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open()>",
			"<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open(java.net.ProtocolFamily)>",
			"<java.nio.channels.DatagramChannel: long write(java.nio.ByteBuffer[])>",
			"<java.nio.channels.DatagramChannel: long write(java.nio.ByteBuffer[],int,int)>",
			/*
			"<javax.crypto.CipherOutputStream: void write(int)>",
			*/
			"<javax.net.ssl.HttpsURLConnection: java.io.OutputStream getOutputStream()>",
			"<javax.net.ssl.SSLContext: void setDefault(javax.net.ssl.SSLContext)>",
			"<javax.net.ssl.SSLEngine: void setSSLParameters(javax.net.ssl.SSLParameters)>",
			"<javax.net.ssl.SSLParameters: void setCipherSuites(java.lang.String[])>",
			"<javax.net.ssl.SSLParameters: void setProtocols(java.lang.String[])>",
			"<javax.net.ssl.SSLSocket: void setSSLParameters(javax.net.ssl.SSLParameters)>",
			"<javax.obex.ClientOperation: void sendHeaders(javax.obex.HeaderSet)>",
			"<javax.obex.ClientSession: boolean sendRequest(int,byte[],javax.obex.HeaderSet,javax.obex.PrivateInputStream)>",
			"<javax.obex.ClientSession: javax.obex.HeaderSet delete(javax.obex.HeaderSet)>",
			"<javax.obex.ClientSession: javax.obex.HeaderSet setPath(javax.obex.HeaderSet,boolean,boolean)>",
			"<javax.obex.ClientSession: void setConnectionID(long)>",
			"<javax.obex.HeaderSet: void setHeader(int,java.lang.Object)>",
			"<javax.obex.ObexHelper: byte[] createHeader(javax.obex.HeaderSet,boolean)>",
			"<javax.obex.PrivateOutputStream: byte[] readBytes(int)>",
			"<javax.obex.PrivateOutputStream: void write(byte[])>",
			"<javax.obex.PrivateOutputStream: void write(byte[],int,int)>",
			"<javax.obex.PrivateOutputStream: void write(int)>",
			"<javax.obex.ServerOperation: boolean sendReply(int)>",
			"<javax.obex.ServerOperation: void sendHeaders(javax.obex.HeaderSet)>",
			"<javax.obex.ServerSession: void sendResponse(int,byte[])>",
			/*
			"<javax.persistence.EntityManager: javax.persistence.TypedQuery createQuery(java.lang.String,java.lang.Class)>",
			*/
			"<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader)>",
			"<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader,javax.script.Bindings)>",
			"<javax.script.ScriptEngine: java.lang.Object eval(java.io.Reader,javax.script.ScriptContext)>",
			"<javax.script.ScriptEngine: java.lang.Object eval(java.lang.String)>",
			"<javax.script.ScriptEngine: java.lang.Object eval(java.lang.String,javax.script.Bindings)>",
			"<javax.script.ScriptEngine: java.lang.Object eval(java.lang.String,javax.script.ScriptContext)>",
			"<javax.servlet.http.HttpServletResponse: void sendRedirect(java.lang.String)>",
			"<javax.servlet.http.HttpServletResponseWrapper: void sendRedirect(java.lang.String)>",
			"<javax.sip.SipFactory: javax.sip.SipStack createSipStack(java.util.Properties)>",
			"<javax.xml.xpath.XPath: javax.xml.xpath.XPathExpression compile(java.lang.String)>",
			"<libcore.io.BlockGuardOs: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>",
			"<libcore.io.BlockGuardOs: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>",
			"<libcore.io.BlockGuardOs: int write(java.io.FileDescriptor,byte[],int,int)>",
			"<libcore.io.BlockGuardOs: int write(java.io.FileDescriptor,java.nio.ByteBuffer)>",
			"<libcore.io.BlockGuardOs: int writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])>",
			"<libcore.io.BlockGuardOs: java.io.FileDescriptor open(java.lang.String,int,int)>",
			"<libcore.io.DropBox$DefaultReporter: void addData(java.lang.String,byte[],int)>",
			"<libcore.io.DropBox$DefaultReporter: void addText(java.lang.String,java.lang.String)>",
			"<libcore.io.ForwardingOs: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>",
			"<libcore.io.ForwardingOs: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>",
			"<libcore.io.ForwardingOs: int write(java.io.FileDescriptor,byte[],int,int)>",
			"<libcore.io.ForwardingOs: int write(java.io.FileDescriptor,java.nio.ByteBuffer)>",
			"<libcore.io.ForwardingOs: int writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])>",
			"<libcore.io.ForwardingOs: java.io.FileDescriptor open(java.lang.String,int,int)>",
			"<libcore.io.ForwardingOs: long sendfile(java.io.FileDescriptor,java.io.FileDescriptor,libcore.util.MutableLong,long)>",
			"<libcore.io.ForwardingOs: void bind(java.io.FileDescriptor,java.net.InetAddress,int)>",
			"<libcore.io.ForwardingOs: void setegid(int)>",
			"<libcore.io.ForwardingOs: void seteuid(int)>",
			"<libcore.io.ForwardingOs: void setgid(int)>",
			"<libcore.io.ForwardingOs: void setsockoptByte(java.io.FileDescriptor,int,int,int)>",
			"<libcore.io.ForwardingOs: void setsockoptGroupReq(java.io.FileDescriptor,int,int,libcore.io.StructGroupReq)>",
			"<libcore.io.ForwardingOs: void setsockoptIfreq(java.io.FileDescriptor,int,int,java.lang.String)>",
			"<libcore.io.ForwardingOs: void setsockoptInt(java.io.FileDescriptor,int,int,int)>",
			"<libcore.io.ForwardingOs: void setsockoptIpMreqn(java.io.FileDescriptor,int,int,int)>",
			"<libcore.io.ForwardingOs: void setsockoptLinger(java.io.FileDescriptor,int,int,libcore.io.StructLinger)>",
			"<libcore.io.ForwardingOs: void setsockoptTimeval(java.io.FileDescriptor,int,int,libcore.io.StructTimeval)>",
			"<libcore.io.ForwardingOs: void setuid(int)>",
			"<libcore.io.IoBridge: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>",
			"<libcore.io.IoBridge: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>",
			"<libcore.io.IoBridge: void bind(java.io.FileDescriptor,java.net.InetAddress,int)>",
			"<libcore.io.IoBridge: void setSocketOption(java.io.FileDescriptor,int,java.lang.Object)>",
			"<libcore.io.IoBridge: void write(java.io.FileDescriptor,byte[],int,int)>",
			"<libcore.io.IoUtils: void setBlocking(java.io.FileDescriptor,boolean)>",
			"<libcore.io.Posix: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>",
			"<libcore.io.Posix: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>",
			"<libcore.io.Posix: int write(java.io.FileDescriptor,byte[],int,int)>",
			"<libcore.io.Posix: int write(java.io.FileDescriptor,java.nio.ByteBuffer)>",
			"<libcore.io.Streams: byte[] readFullyNoClose(java.io.InputStream)>",
			"<libcore.io.Streams: int copy(java.io.InputStream,java.io.OutputStream)>",
			"<libcore.io.Streams: java.lang.String readFully(java.io.Reader)>",
			"<libcore.net.UriCodec: java.lang.String decode(java.lang.String,boolean,java.nio.charset.Charset,boolean)>",
			"<libcore.net.http.AbstractHttpInputStream: void cacheWrite(byte[],int,int)>",
			"<libcore.net.http.ChunkedOutputStream: void write(byte[],int,int)>",
			"<libcore.net.http.FixedLengthOutputStream: void write(byte[],int,int)>",
			"<libcore.net.http.HttpConnection: void setRecycled()>",
			"<libcore.net.http.HttpConnection: void setSoTimeout(int)>",
			"<libcore.net.http.HttpConnection: void setupSecureSocket(javax.net.ssl.SSLSocketFactory,boolean)>",
			"<libcore.net.http.HttpConnectionPool: void recycle(libcore.net.http.HttpConnection)>",
			"<libcore.net.http.HttpURLConnectionImpl: void setRequestProperty(java.lang.String,java.lang.String)>",
			"<libcore.net.http.HttpsURLConnectionImpl: void setAllowUserInteraction(boolean)>",
			"<libcore.net.http.HttpsURLConnectionImpl: void setChunkedStreamingMode(int)>",
			"<libcore.net.http.HttpsURLConnectionImpl: void setConnectTimeout(int)>",
			"<libcore.net.http.HttpsURLConnectionImpl: void setDefaultUseCaches(boolean)>",
			"<libcore.net.http.HttpsURLConnectionImpl: void setDoInput(boolean)>",
			"<libcore.net.http.HttpsURLConnectionImpl: void setDoOutput(boolean)>",
			"<libcore.net.http.HttpsURLConnectionImpl: void setFixedLengthStreamingMode(int)>",
			"<libcore.net.http.HttpsURLConnectionImpl: void setIfModifiedSince(long)>",
			"<libcore.net.http.HttpsURLConnectionImpl: void setInstanceFollowRedirects(boolean)>",
			"<libcore.net.http.HttpsURLConnectionImpl: void setReadTimeout(int)>",
			"<libcore.net.http.HttpsURLConnectionImpl: void setRequestMethod(java.lang.String)>",
			"<libcore.net.http.HttpsURLConnectionImpl: void setRequestProperty(java.lang.String,java.lang.String)>",
			"<libcore.net.http.HttpsURLConnectionImpl: void setUseCaches(boolean)>",
			"<libcore.net.http.RawHeaders: void set(java.lang.String,java.lang.String)>",
			"<libcore.net.http.RawHeaders: void setStatusLine(java.lang.String)>",
			"<libcore.net.http.RequestHeaders: void setIfModifiedSince(java.util.Date)>",
			"<libcore.net.http.RetryableOutputStream: void write(byte[],int,int)>",
			"<libcore.net.http.RetryableOutputStream: void writeToSocket(java.io.OutputStream)>",
			"<libcore.net.url.JarURLConnectionImpl: void setDefaultUseCaches(boolean)>",
			"<libcore.net.url.JarURLConnectionImpl: void setUseCaches(boolean)>",
			"<net.sourceforge.pebble.domain.Comment: void setAuthenticated(boolean)>",
			"<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>",
			"<org.apache.harmony.xml.ExpatParser$EntityParser: void startElement(java.lang.String,java.lang.String,java.lang.String,int,int)>",
			"<org.apache.harmony.xml.ExpatParser: void startDtd(java.lang.String,java.lang.String,java.lang.String)>",
			"<org.apache.harmony.xml.ExpatParser: void startElement(java.lang.String,java.lang.String,java.lang.String,int,int)>",
			"<org.apache.harmony.xml.ExpatParser: void startNamespace(java.lang.String,java.lang.String)>",
			"<org.apache.harmony.xml.ExpatReader: void setProperty(java.lang.String,java.lang.Object)>",
			"<org.apache.harmony.xml.dom.AttrImpl: void setPrefix(java.lang.String)>",
			"<org.apache.harmony.xml.dom.CharacterDataImpl: void setData(java.lang.String)>",
			"<org.apache.harmony.xml.dom.DOMConfigurationImpl$FixedParameter: void set(org.apache.harmony.xml.dom.DOMConfigurationImpl,java.lang.Object)>",
			"<org.apache.harmony.xml.dom.DOMConfigurationImpl: void setParameter(java.lang.String,java.lang.Object)>",
			"<org.apache.harmony.xml.dom.ElementImpl: void setAttribute(java.lang.String,java.lang.String)>",
			"<org.apache.harmony.xml.dom.ElementImpl: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>",
			"<org.apache.harmony.xml.dom.ElementImpl: void setIdAttribute(java.lang.String,boolean)>",
			"<org.apache.harmony.xml.dom.ElementImpl: void setIdAttributeNS(java.lang.String,java.lang.String,boolean)>",
			"<org.apache.harmony.xml.dom.ElementImpl: void setPrefix(java.lang.String)>",
			"<org.apache.harmony.xml.dom.NodeImpl: java.lang.Object setUserData(java.lang.String,java.lang.Object,org.w3c.dom.UserDataHandler)>",
			"<org.apache.harmony.xml.dom.NodeImpl: void setNodeValue(java.lang.String)>",
			"<org.apache.harmony.xml.dom.NodeImpl: void setPrefix(java.lang.String)>",
			"<org.apache.harmony.xml.dom.NodeImpl: void setTextContent(java.lang.String)>",
			"<org.apache.harmony.xml.parsers.DocumentBuilderFactoryImpl: void setAttribute(java.lang.String,java.lang.Object)>",
			"<org.apache.harmony.xml.parsers.DocumentBuilderFactoryImpl: void setFeature(java.lang.String,boolean)>",
			"<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: byte[] toBytes(javax.net.ssl.SSLSession)>",
			"<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: void setSessionTimeout(int)>",
			"<org.apache.harmony.xnet.provider.jsse.AlertProtocol: void alert(byte,byte)>",
			"<org.apache.harmony.xnet.provider.jsse.CertificateMessage: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)>",
			"<org.apache.harmony.xnet.provider.jsse.CertificateRequest: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)>",
			"<org.apache.harmony.xnet.provider.jsse.CertificateVerify: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)>",
			"<org.apache.harmony.xnet.provider.jsse.ClientHello: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)>",
			"<org.apache.harmony.xnet.provider.jsse.ClientKeyExchange: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)>",
			"<org.apache.harmony.xnet.provider.jsse.ClientSessionContext: void setSessionTimeout(int)>",
			"<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] decrypt(byte,byte[],int,int)>",
			"<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] encrypt(byte,byte[],int,int)>",
			"<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: void <init>",
			"<org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: byte[] decrypt(byte,byte[],int,int)>",
			"<org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: byte[] encrypt(byte,byte[],int,int)>",
			"<org.apache.harmony.xnet.provider.jsse.DigitalSignature: void update(byte[])>",
			"<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: void putSessionData(javax.net.ssl.SSLSession,byte[])>",
			"<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache: org.apache.harmony.xnet.provider.jsse.SSLClientSessionCache usingDirectory(java.io.File)>",
			"<org.apache.harmony.xnet.provider.jsse.Finished: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)>",
			"<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: void send(org.apache.harmony.xnet.provider.jsse.Message)>",
			"<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>",
			"<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void setEnabledCipherSuites(int,java.lang.String[])>",
			"<org.apache.harmony.xnet.provider.jsse.NativeCrypto: void setEnabledProtocols(int,java.lang.String[])>",
			"<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void setEnableSessionCreation(boolean)>",
			"<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void setEnabledCipherSuites(java.lang.String[])>",
			"<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void setEnabledProtocols(java.lang.String[])>",
			"<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void setNeedClientAuth(boolean)>",
			"<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void setUseClientMode(boolean)>",
			"<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void setWantClientAuth(boolean)>",
			"<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: void putValue(java.lang.String,java.lang.Object)>",
			"<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$SSLOutputStream: void write(int)>",
			"<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void sendUrgentData(int)>",
			"<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setEnableSessionCreation(boolean)>",
			"<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setEnabledCipherSuites(java.lang.String[])>",
			"<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setEnabledProtocols(java.lang.String[])>",
			"<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setNeedClientAuth(boolean)>",
			"<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setOOBInline(boolean)>",
			"<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setUseClientMode(boolean)>",
			"<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setWantClientAuth(boolean)>",
			"<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setKeepAlive(boolean)>",
			"<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setReceiveBufferSize(int)>",
			"<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setReuseAddress(boolean)>",
			"<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setSendBufferSize(int)>",
			"<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setSoLinger(boolean,int)>",
			"<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setSoTimeout(int)>",
			"<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setTcpNoDelay(boolean)>",
			"<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: void setTrafficClass(int)>",
			"<org.apache.harmony.xnet.provider.jsse.PinFailureLogger: void log(java.lang.String,boolean,boolean,java.util.List)>",
			"<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer)>",
			"<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void setEnableSessionCreation(boolean)>",
			"<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void setEnabledCipherSuites(java.lang.String[])>",
			"<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void setEnabledProtocols(java.lang.String[])>",
			"<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void setNeedClientAuth(boolean)>",
			"<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void setUseClientMode(boolean)>",
			"<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void setWantClientAuth(boolean)>",
			"<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: byte[] wrap(byte,byte[],int,int)>",
			"<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: void alert(byte,byte)>",
			"<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: void setEnableSessionCreation(boolean)>",
			"<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: void setEnabledCipherSuites(java.lang.String[])>",
			"<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: void setEnabledProtocols(java.lang.String[])>",
			"<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: void setNeedClientAuth(boolean)>",
			"<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: void setUseClientMode(boolean)>",
			"<org.apache.harmony.xnet.provider.jsse.SSLServerSocketImpl: void setWantClientAuth(boolean)>",
			"<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: void putValue(java.lang.String,java.lang.Object)>",
			"<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void sendUrgentData(int)>",
			"<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setEnableSessionCreation(boolean)>",
			"<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setEnabledCipherSuites(java.lang.String[])>",
			"<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setEnabledProtocols(java.lang.String[])>",
			"<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setNeedClientAuth(boolean)>",
			"<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setOOBInline(boolean)>",
			"<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setUseClientMode(boolean)>",
			"<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void setWantClientAuth(boolean)>",
			"<org.apache.harmony.xnet.provider.jsse.SSLSocketImpl: void writeAppData(byte[],int,int)>",
			"<org.apache.harmony.xnet.provider.jsse.SSLSocketOutputStream: void write(byte[],int,int)>",
			"<org.apache.harmony.xnet.provider.jsse.SSLSocketOutputStream: void write(int)>",
			"<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setKeepAlive(boolean)>",
			"<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setReceiveBufferSize(int)>",
			"<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setReuseAddress(boolean)>",
			"<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setSendBufferSize(int)>",
			"<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setSoLinger(boolean,int)>",
			"<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setSoTimeout(int)>",
			"<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setTcpNoDelay(boolean)>",
			"<org.apache.harmony.xnet.provider.jsse.SSLSocketWrapper: void setTrafficClass(int)>",
			"<org.apache.harmony.xnet.provider.jsse.ServerHello: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)>",
			"<org.apache.harmony.xnet.provider.jsse.ServerHelloDone: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)>",
			"<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)>",
			"<org.apache.harmony.xnet.provider.jsse.ServerSessionContext: void setSessionTimeout(int)>",
			"<org.apache.harmony.xnet.provider.jsse.TrustedCertificateIndex: void index(java.security.cert.TrustAnchor)>",
			"<org.apache.harmony.xnet.provider.jsse.TrustedCertificateStore: void installCertificate(java.security.cert.X509Certificate)>",
			"<org.apache.http.auth.AuthSchemeRegistry: void register(java.lang.String,org.apache.http.auth.AuthSchemeFactory)>",
			"<org.apache.http.auth.AuthSchemeRegistry: void setItems(java.util.Map)>",
			"<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>",
			"<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>",
			"<org.apache.http.client.methods.HttpGet: void <init>(java.lang.String)>",
			"<org.apache.http.client.methods.HttpGet: void <init>(java.net.URI)>",
			"<org.apache.http.client.methods.HttpGet: void addHeader(java.lang.String,java.lang.String)>",
			"<org.apache.http.client.methods.HttpGet: void setHeader(java.lang.String,java.lang.String)>",
			"<org.apache.http.client.methods.HttpPost: void <init>(java.lang.String)>",
			"<org.apache.http.client.methods.HttpPost: void addHeader(java.lang.String,java.lang.String)>",
			"<org.apache.http.client.methods.HttpPost: void setEntity(org.apache.http.HttpEntity)>",
			"<org.apache.http.client.methods.HttpPost: void setHeader(java.lang.String,java.lang.String)>",
			"<org.apache.http.conn.BasicManagedEntity: void writeTo(java.io.OutputStream)>",
			"<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme)>",
			"<org.apache.http.conn.scheme.SchemeRegistry: void setItems(java.util.Map)>",
			"<org.apache.http.cookie.CookieSpecRegistry: void register(java.lang.String,org.apache.http.cookie.CookieSpecFactory)>",
			"<org.apache.http.cookie.CookieSpecRegistry: void setItems(java.util.Map)>",
			"<org.apache.http.entity.AbstractHttpEntity: void setContentEncoding(java.lang.String)>",
			"<org.apache.http.entity.AbstractHttpEntity: void setContentType(java.lang.String)>",
			"<org.apache.http.entity.BufferedHttpEntity: void writeTo(java.io.OutputStream)>",
			"<org.apache.http.entity.HttpEntityWrapper: void writeTo(java.io.OutputStream)>",
			"<org.apache.http.impl.AbstractHttpClientConnection: void sendRequestHeader(org.apache.http.HttpRequest)>",
			"<org.apache.http.impl.HttpConnectionMetricsImpl: void setMetric(java.lang.String,java.lang.Object)>",
			"<org.apache.http.impl.SocketHttpClientConnection: void setSocketTimeout(int)>",
			"<org.apache.http.impl.auth.DigestScheme: void overrideParamter(java.lang.String,java.lang.String)>",
			"<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>",
			"<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>",
			"<org.apache.http.impl.client.BasicCredentialsProvider: void setCredentials(org.apache.http.auth.AuthScope,org.apache.http.auth.Credentials)>",
			"<org.apache.http.impl.client.ClientParamsStack: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>",
			"<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>",
			"<org.apache.http.impl.client.DefaultHttpClient: void <init>(int)>",
			"<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.impl.client.RoutedRequest handleResponse(org.apache.http.impl.client.RoutedRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>",
			"<org.apache.http.impl.conn.AbstractClientConnAdapter: void setIdleDuration(long,java.util.concurrent.TimeUnit)>",
			"<org.apache.http.impl.conn.AbstractClientConnAdapter: void setSocketTimeout(int)>",
			"<org.apache.http.impl.conn.AbstractPooledConnAdapter: void setState(java.lang.Object)>",
			"<org.apache.http.impl.conn.DefaultClientConnection: void openCompleted(boolean,org.apache.http.params.HttpParams)>",
			"<org.apache.http.impl.conn.DefaultClientConnection: void sendRequestHeader(org.apache.http.HttpRequest)>",
			"<org.apache.http.impl.conn.DefaultClientConnection: void update(java.net.Socket,org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams)>",
			"<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void write(byte[])>",
			"<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void write(byte[],int,int)>",
			"<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void write(int)>",
			"<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void writeLine(java.lang.String)>",
			"<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void writeLine(org.apache.http.util.CharArrayBuffer)>",
			"<org.apache.http.impl.cookie.AbstractCookieSpec: void registerAttribHandler(java.lang.String,org.apache.http.cookie.CookieAttributeHandler)>",
			"<org.apache.http.impl.cookie.BasicClientCookie: void setAttribute(java.lang.String,java.lang.String)>",
			"<org.apache.http.impl.cookie.BasicClientCookie: void setDomain(java.lang.String)>",
			"<org.apache.http.impl.cookie.DateUtils$DateFormatHolder: java.text.SimpleDateFormat formatFor(java.lang.String)>",
			"<org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(byte[])>",
			"<org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(byte[],int,int)>",
			"<org.apache.http.impl.io.AbstractSessionOutputBuffer: void writeLine(java.lang.String)>",
			"<org.apache.http.impl.io.AbstractSessionOutputBuffer: void writeLine(org.apache.http.util.CharArrayBuffer)>",
			"<org.apache.http.impl.io.ChunkedOutputStream: void flushCacheWithAppend(byte[],int,int)>",
			"<org.apache.http.impl.io.ChunkedOutputStream: void write(byte[])>",
			"<org.apache.http.impl.io.ContentLengthOutputStream: void write(byte[])>",
			"<org.apache.http.impl.io.ContentLengthOutputStream: void write(byte[],int,int)>",
			"<org.apache.http.impl.io.ContentLengthOutputStream: void write(int)>",
			"<org.apache.http.impl.io.IdentityOutputStream: void write(byte[])>",
			"<org.apache.http.impl.io.IdentityOutputStream: void write(byte[],int,int)>",
			"<org.apache.http.impl.io.IdentityOutputStream: void write(int)>",
			"<org.apache.http.message.AbstractHttpMessage: void setHeader(java.lang.String,java.lang.String)>",
			"<org.apache.http.message.AbstractHttpMessage: void setHeader(org.apache.http.Header)>",
			"<org.apache.http.message.AbstractHttpMessage: void setHeaders(org.apache.http.Header[])>",
			"<org.apache.http.message.BasicHttpResponse: void setReasonPhrase(java.lang.String)>",
			"<org.apache.http.message.BasicHttpResponse: void setStatusCode(int)>",
			"<org.apache.http.message.BasicHttpResponse: void setStatusLine(org.apache.http.ProtocolVersion,int)>",
			"<org.apache.http.message.BasicHttpResponse: void setStatusLine(org.apache.http.ProtocolVersion,int,java.lang.String)>",
			"<org.apache.http.message.HeaderGroup: void setHeaders(org.apache.http.Header[])>",
			"<org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setBooleanParameter(java.lang.String,boolean)>",
			"<org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setDoubleParameter(java.lang.String,double)>",
			"<org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)>",
			"<org.apache.http.params.AbstractHttpParams: org.apache.http.params.HttpParams setLongParameter(java.lang.String,long)>",
			"<org.apache.http.params.BasicHttpParams: org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object)>",
			"<org.apache.http.params.BasicHttpParams: void setParameters(java.lang.String[],java.lang.Object)>",
			"<org.apache.http.protocol.BasicHttpContext: void setAttribute(java.lang.String,java.lang.Object)>",
			"<org.apache.http.protocol.DefaultedHttpContext: void setAttribute(java.lang.String,java.lang.Object)>",
			"<org.apache.xalan.templates.ElemTemplateElement: org.w3c.dom.Node replaceChild(org.w3c.dom.Node,org.w3c.dom.Node)>",
			"<org.apache.xalan.xsltc.compiler.util.Util: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String[])>",
			"<org.apache.xalan.xsltc.runtime.BasisLibrary: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String[])>",
			"<org.apache.xerces.impl.xpath.regex.REUtil: void dumpString(java.lang.String)>",
			"<org.apache.xerces.impl.xs.models.XSDFACM: void dumpTree(org.apache.xerces.impl.dtd.models.CMNode,int)>",
			"<org.apache.xmlrpc.client.XmlRpcClient: java.lang.Object execute(java.lang.String,java.lang.Object[])>",
			"<org.apache.xmlrpc.server.ReflectiveXmlRpcHandler: java.lang.Object execute(org.apache.xmlrpc.XmlRpcRequest)>",
			"<org.apache.xmlrpc.server.XmlRpcServerWorker: java.lang.Object execute(org.apache.xmlrpc.XmlRpcRequest)>",
			"<org.apache.xmlrpc.webserver.Connection: void writeResponseHeader(org.apache.xmlrpc.webserver.RequestData,int)>",
			"<org.apache.xmlrpc.webserver.ConnectionServer: void writeResponse(org.apache.xmlrpc.common.XmlRpcStreamRequestConfig,java.io.OutputStream,java.lang.Object)>",
			"<org.apache.xmlrpc.webserver.ServletOutputStreamImpl: void write(byte[],int,int)>",
			"<org.apache.xmlrpc.webserver.WebServer: void setParanoid(boolean)>",
			"<org.apache.xmlrpc.webserver.XmlRpcServlet: void log(java.lang.String)>",
			"<org.apache.xmlrpc.webserver.XmlRpcServletServer: void execute(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>",
			"<org.apache.xmlrpc.webserver.XmlRpcServletServer: void setResponseHeader(org.apache.xmlrpc.common.ServerStreamConnection,java.lang.String,java.lang.String)>",
			"<org.apache.xpath.jaxp.XPathImpl: javax.xml.xpath.XPathExpression compile(java.lang.String)>",
			"<org.eclipse.paho.android.service.MqttAndroidClient: org.eclipse.paho.client.mqttv3.IMqttDeliveryToken publish(java.lang.String,byte[],int,boolean)>",
			"<org.eclipse.paho.android.service.MqttAndroidClient: org.eclipse.paho.client.mqttv3.IMqttDeliveryToken publish(java.lang.String,byte[],int,boolean,java.lang.Object,org.eclipse.paho.client.mqttv3.IMqttActionListener)>",
			"<org.eclipse.paho.android.service.MqttAndroidClient: org.eclipse.paho.client.mqttv3.IMqttDeliveryToken publish(java.lang.String,org.eclipse.paho.client.mqttv3.MqttMessage)>",
			"<org.eclipse.paho.android.service.MqttAndroidClient: org.eclipse.paho.client.mqttv3.IMqttDeliveryToken publish(java.lang.String,org.eclipse.paho.client.mqttv3.MqttMessage,java.lang.Object,org.eclipse.paho.client.mqttv3.IMqttActionListener)>",
			"<org.eclipse.paho.client.mqttv3.MqttClient: org.eclipse.paho.client.mqttv3.MqttTopic getTopic(java.lang.String)>",
			"<org.eclipse.paho.client.mqttv3.MqttClient: void <init>(java.lang.String,java.lang.String)>",
			"<org.eclipse.paho.client.mqttv3.MqttClient: void <init>(java.lang.String,java.lang.String,org.eclipse.paho.client.mqttv3.MqttClientPersistence)>",
			"<org.eclipse.paho.client.mqttv3.MqttClient: void publish(java.lang.String,byte[],int,boolean)>",
			"<org.eclipse.paho.client.mqttv3.MqttClient: void publish(java.lang.String,org.eclipse.paho.client.mqttv3.MqttMessage)>",
			"<org.eclipse.paho.client.mqttv3.MqttTopic: org.eclipse.paho.client.mqttv3.MqttDeliveryToken publish(byte[],int,boolean)>",
			"<org.eclipse.paho.client.mqttv3.MqttTopic: org.eclipse.paho.client.mqttv3.MqttDeliveryToken publish(org.eclipse.paho.client.mqttv3.MqttMessage)>",
			"<org.jetbrains.anko.AsyncKt: java.util.concurrent.Future doAsync$default(java.lang.Object,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1,int,java.lang.Object)>",
			"<org.json.JSONArray: java.lang.String toString(int)>",
			"<org.json.JSONArray: org.json.JSONArray put(int,boolean)>",
			"<org.json.JSONArray: org.json.JSONArray put(int,double)>",
			"<org.json.JSONArray: org.json.JSONArray put(int,int)>",
			"<org.json.JSONArray: org.json.JSONArray put(int,long)>",
			"<org.json.JSONArray: org.json.JSONObject toJSONObject(org.json.JSONArray)>",
			"<org.json.JSONObject: java.lang.String toString(int)>",
			"<org.json.JSONObject: org.json.JSONObject accumulate(java.lang.String,java.lang.Object)>",
			"<org.json.JSONObject: org.json.JSONObject put(java.lang.String,boolean)>",
			"<org.json.JSONObject: org.json.JSONObject put(java.lang.String,double)>",
			"<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>",
			"<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>",
			"<org.json.JSONObject: org.json.JSONObject put(java.lang.String,long)>",
			"<org.json.JSONObject: org.json.JSONObject putOpt(java.lang.String,java.lang.Object)>",
			"<org.jsoup.nodes.Node: org.jsoup.nodes.Node after(java.lang.String)>",
			"<org.jsoup.nodes.Node: org.jsoup.nodes.Node before(java.lang.String)>",
			"<org.jsoup.parser.Parser: org.jsoup.nodes.Document parse(java.lang.String,java.lang.String)>",
			"<org.ksoap2.transport.AndroidHttpTransport: void call(java.lang.String,org.ksoap2.SoapEnvelope)>",
			"<org.ksoap2.transport.HttpTransportSE: void call(java.lang.String,org.ksoap2.SoapEnvelope)>",
			"<org.ksoap2x.transport.HttpTransportSE: java.util.List call(java.lang.String,org.ksoap2x.SoapEnvelope,java.util.List)>",
			"<org.ksoap2x.transport.HttpTransportSE: java.util.List call(java.lang.String,org.ksoap2x.SoapEnvelope,java.util.List,java.io.File)>",
			"<org.ksoap2x.transport.KeepAliveHttpTransportSE: java.util.List call(java.lang.String,org.ksoap2x.SoapEnvelope,java.util.List)>",
			"<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object query(java.lang.String,org.springframework.jdbc.core.ResultSetExtractor)>",
			"<org.springframework.jdbc.core.JdbcTemplate: void execute(java.lang.String)>",
			"<org.springframework.mock.web.MockBodyContent: void println(char[])>",
			"<org.springframework.mock.web.MockBodyContent: void println(java.lang.String)>",
			"<org.springframework.mock.web.MockJspWriter: void println(java.lang.String)>",
			"<org.springframework.mock.web.portlet.MockPortletRequest: void setParameter(java.lang.String,java.lang.String)>",
			"<org.springframework.mock.web.portlet.MockPortletRequest: void setParameters(java.util.Map)>",
			"<org.springframework.web.client.RestOperations: org.springframework.http.ResponseEntity exchange(java.lang.String,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,java.lang.Class,java.lang.Object[])>",
			"<org.springframework.web.client.RestTemplate: org.springframework.http.ResponseEntity exchange(java.lang.String,org.springframework.http.HttpMethod,org.springframework.http.HttpEntity,java.lang.Class,java.lang.Object[])>",
			"<org.springframework.web.servlet.tags.UrlTag: java.lang.String createUrl)>",
			"<org.springframework.web.socket.adapter.standard.StandardWebSocketSession: void sendTextMessage(org.springframework.web.socket.TextMessage)>",
			"<org.springframework.web.socket.config.HandlersBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)>",
			"<org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator: void sendMessage(org.springframework.web.socket.WebSocketMessage)>",
			"<org.springframework.web.socket.server.support.WebSocketHttpRequestHandler: void handleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>",
			"<org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession: void handleMessage(org.springframework.web.socket.TextMessage,org.springframework.web.socket.WebSocketSession)>",
			"<retrofit.client.ApacheClient: org.apache.http.HttpResponse execute(org.apache.http.client.HttpClient,org.apache.http.client.methods.HttpUriRequest)>",
			"<retrofit.client.OkClient: retrofit.client.Response execute(retrofit.client.Request)>",
			"<retrofit2.Retrofit$Builder: retrofit2.Retrofit build()>"
	});
}
